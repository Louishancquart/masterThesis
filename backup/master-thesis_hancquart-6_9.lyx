#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass dcsbook
\begin_preamble
%
%  $Id: thesis-template.lyx,v 1.7 2011/12/22 12:10:18 sobaniec Exp $
%
\end_preamble
\options thesis
\use_default_options false
\begin_modules
dcs
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding default
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize 11
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\pdf_quoted_options "urlcolor=linkcolor,linkcolor=linkcolor,citecolor=linkcolor"
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Indeks
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2.5cm
\rightmargin 2cm
\bottommargin 2.5cm
\secnumdepth 3
\tocdepth 4
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\listings_params "basicstyle={\ttfamily},commentstyle={\color{green}\ttfamily},keywordstyle={\color{blue}\ttfamily},language={Java},morecomment={[l][\color{magenta}]{\#}},numbers=left,numberstyle={\tiny},stringstyle={\color{red}\ttfamily},backgroundcolor={\color{verylightgrey}},breakautoindent=true,xleftmargin={10pt},breaklines=true,breakatwhitespace=true"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Author
Louis Hancquart
\end_layout

\begin_layout Title
<the name of the system>: Design and implementation of a decentralized applicati
on for ad-free video hosting
\end_layout

\begin_layout Date
Poznań, 2016
\end_layout

\begin_layout Supervisor
Paweł T.
 Wojciechowski
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Subtitle
Master's Thesis
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frontmatter
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%%code background color
\end_layout

\begin_layout Plain Layout


\backslash
definecolor{verylightgrey}{RGB}{217,217,217} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Chapter*
Abstract
\end_layout

\begin_layout Standard
lroem ipsum .............sd;lfks;dlkf;sldkf;lskd;flks;dlkf;
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mainmatter
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Paragraph
The goal and the scope of the thesis
\end_layout

\begin_layout Standard
As a continuum from the time where TV was set in the center of the living-room,
 people are watching more and Films and videos.
 it is set that the watching time per day didn't stop increasing from 20
 years (source) .
 And it is not about to stop.
 The next generation of video-eaters are even more hungry.
 They grown up with a smartphone and a lot of video applications available
 everywhere, all the time.
 The success of applications like hangouts, youtube, facebook ,vimeo...
 demonstrate an increasing usage and demand of videos.
\end_layout

\begin_layout Standard
If the video consumption is constantly increasing for years, the medium
 is changing.
 Traditionally, the TV is a top-down media type.
 There is an antenna owned by companies or governments channels that emits
 programs towards people watching.
 It is a one-to-many structure.
 On the Internet, the topology is totally different : born as Arpanet ,
 a university network to exchange research data, the Internet nature is
 to be flat.
 It is a one-to-one connection ( or peer to peer ).
 This medium, firstly reserved reserved to experts, has grown and got simpler
 to use, then spread to the majority of people.
 Nowadays almost everyone has an Internet connection.
 As a result, more and more people are switching off their TVs to browse
 through the Internet.
 Some content provider like Youtube or Dailymotin rose, reproducing the
 previous one-to-many pattern over the Internet.
 But as it makes no difference to increase the audience of a TV channel
 using an antenna, it is a bigger problem on a mesh network.
 
\end_layout

\begin_layout Standard
By nature, Internet is a flat mesh network where each node can emit the
 content he likes.
 Transposing old technologies like TV on the Internet suppose to concentrate
 the majority of the data flux on a few nodes ( e.g.
 Youtube, Facebook, etc.) .
 Of course, watching videos on central websites like Youtube is by far a
 different experience than watching videos on TV.
 Many people can provide their content easily.
 It changes a lot of things : a lot more content providers, an infinite
 channels choice, an interaction between the provider and the audience.
 Nevertheless, on the most popular video platforms, all the content produce
 by the providers is the property of the host, e.g.
 the platform.
 The free access to the content provided is not a mandatory and may not
 remain as it is nowadays.
 The content control on some videos has already been observed and to support
 the service, providers sell advertisement space to their platform.
 In the future, the Internet video possibilities will look like its ancestor:
 the TV: central video supply , cut with advertisement and content controlled
 moreover in an environment meant to have a flat topology.
\end_layout

\begin_layout Standard
It is a problem that most of people doesn't get for the moment.
 Big companies already got the almost-monopoly of the video delivery on
 Internet.
 Simulating the Internet flat nature and freedom of speaking, they are loosing
 a lot of money storing freely a lot of videos from everyone.
 They are probably waiting to get more audience than the TV.
 
\end_layout

\begin_layout Standard
So, What can we do to avoid this? One solution is the peer to peer : Content
 hosted through by everyone for everyone.
 This technology is now available for more than a decade.
 At first it was the only way to exchange videos on the Internet.
 This network had too small data traffic capacities to allow video downloading
 from one website as we are doing right now.
 But recently this technology loose in popularity as it has begun too complex
 to use for the lambda user switching from TV to the Internet.
 
\end_layout

\begin_layout Standard
The aim of Thesis is to provide an efficient application to manage torrents
 automatically and to free the end user from downloading , latency , etc..
 
\end_layout

\begin_layout Standard
And I will go through theses points: Background , ......
 .
\end_layout

\begin_layout Chapter
Background 
\end_layout

\begin_layout Standard
To begin, I will set the background context, necessary to understand this
 thesis.
\end_layout

\begin_layout Standard
At first, I will draw your interest on the Internet Economical environment.
 Then I will set the technical on which this thesis started on.
 Finally, I will center the reflection on the particular problem this thesis
 try to answer : decentralization and ad free video hosting application.
\end_layout

\begin_layout Section
Economical Context
\end_layout

\begin_layout Standard
*In order to set up the context of a decentralized video application, I
 would like to focus on 3 points : the network , the market, and the different
 actors to take into account.
 
\end_layout

\begin_layout Subsection
Actors
\end_layout

\begin_layout Standard
On the web, there is different ways to get video content: video hosting
 websites, peer-to-peer, streaming websites, direct download.
 I am going to describe them here.
 
\end_layout

\begin_layout Subsubsection
video hosting websites
\end_layout

\begin_layout Standard
The video hosting services allows individual end users to upload and share
 personal, business, or royalty-free videos and to watch them legally.
\begin_inset CommandInset citation
LatexCommand cite
key "key-9"

\end_inset

.
 We spend more and more time on Intertnet and video websites.
 Traffic on video hosting services are rising from a few years and it is
 slowly replacing the TV.
 
\end_layout

\begin_layout Standard
There is a few reasons that makes these websites so popular.
 First, since internet has a flat topology, the communication is not top-down
 but more peer to peer.
 It gave a will of expressiveness.
 ( source to find ).
 Second of all, most people do not own web servers, and this has created
 demand for user-generated video content hosting.
 The hosting websites definitely answer this demand, providing a user-friendly
 interface and a common place to upload and watch videos.
 Further more, the video hosting websites are suiting the user expression
 will are they are adaped to low quality video like phone video, etc.
 It might change with the growing professionalism and quality video format
 of creators.
 
\end_layout

\begin_layout Standard
( https://en.wikipedia.org/wiki/Video_hosting_service )
\end_layout

\begin_layout Paragraph
Usage 
\end_layout

\begin_layout Standard
Users generally will upload via the hosting service's website, mobile or
 desktop applications or APIs.
 The type of video content uploaded can be anything from short video clips
 and digital audio files all the way to full-length TV shows and movies.
 The video host stores the video on its server offers individual different
 types of embed codes or links to allow others to view this video.
 The website, mainly used as the video hosting website, is usually called
 the video sharing website.
 Some video hosting services offer copyrighted TV shows, movies and music
 for which they have not obtained the necessary copyright approvals.
\end_layout

\begin_layout Paragraph
History
\end_layout

\begin_layout Standard
Nowadays, there is a lot of video hosting websites : Youtube, Vimeo , Dailymotio
n, are one of the most famous example.
 The first website of the kind was founded in was founded in 1997 by Chase
 Norlin
\begin_inset CommandInset citation
LatexCommand cite
key "shareyourworld.com"

\end_inset

.
 Similar to the actual video hosting websites, shareyourworld.com allowed
 users to upload clips or full videos in different file formats.
 The site shutdown in 2001 due to budget and bandwidth problems.
\end_layout

\begin_layout Paragraph
centralisation
\end_layout

\begin_layout Standard
One caracteristic of the video hosting platforms is to be centralized.
 It is a website on wihch every user connects and request a video from this
 one.
 
\end_layout

\begin_layout Subparagraph
network issues
\end_layout

\begin_layout Standard
Thousands of billions of peopole are connecting to the same node of the
 network.
 It makes a huge load of requests and content supply.
 The servers has to uses strategies like load ballancing to handle this
 and serve the videos.
 
\end_layout

\begin_layout Standard
Internet is a mesh network and distributting most of the traffic on a few
 node is difficult to support for the servers and the network equipment.
 ISPs( ) are fighting agains such big video hosting services like youtube
 to make them pay a tax for using their network.
 As we said earlier, it was even one of the reason of the first website
 of this kind to bankrupt ( cf History ).
\end_layout

\begin_layout Subparagraph
mediatic issues
\end_layout

\begin_layout Standard
As the video hosting services are delivered by a very few number of websites
 ( https://en.wikipedia.org/wiki/List_of_video_hosting_services ) , even if
 the internet tends to have a flat topology , the media seems to not be
 so far from the TV than its topology suggest.
 Video hosting website are not a top- down communication system but it is
 not as flat as it is said to be ( source ).
 Everyone can express itself but the most viewed videos are made more suggested
 than the other ones.
 it tends to centralize the audience on a few channels and can lead to a
 lack diverssity of point of view.
\end_layout

\begin_layout Subparagraph
censorship issues
\end_layout

\begin_layout Standard
With the mirage about diversity of opinions on those platforms, there is
 no more freedom of speaking in every country.
 Being cetralized make it possbiel to be controlled or pressured by governments.
 For Youtube alone, a list of 23 countries for which censorship is applied
 is available on wikipedia.
 It includes Afghanistan, Armenia, Bangladesh, Brazil, China, Eritrea, Germany,
 Indonesia, Iran, Libya, Malaysia, Morocco, North Korea, Pakistan, Russia,
 Syria, Sudan, South Sudan, Tajikistan, Thailand, Turkey, Turkmenistan.
 
\end_layout

\begin_layout Standard
Recently, a case about Youtube appeared on the news pointing out that the
 channel 
\begin_inset Quotes eld
\end_inset

Philip deFranco
\begin_inset Quotes erd
\end_inset

 ( and other creators ) has been demonetized by a Youtube decision because
 their video would deem not to be 
\begin_inset Quotes eld
\end_inset

advertiser friendly".
\end_layout

\begin_layout Standard
http://betanews.com/2016/09/03/youtube-demonetizes-videos/
\end_layout

\begin_layout Standard
https://en.wikipedia.org/wiki/Censorship_of_YouTube#.C2.A0Russia
\end_layout

\begin_layout Standard
https://en.wikipedia.org/wiki/Censorship_by_Google#Ungoogleable
\end_layout

\begin_layout Paragraph
copyright issues
\end_layout

\begin_layout Standard
In spite of video hosting services can has control on video availability,
 it doesn't prevent the break of copyright by several technics confusing
 the robots checking the videos.
 Even for users it could be confusing and they may not konw if they are
 watching a copyrighted video or not.( sources ) 
\end_layout

\begin_layout Paragraph
Futur usage
\end_layout

\begin_layout Standard
the samrtphones usage growing, the watching of videos is compelled to increase
 sensibly and is an important market to reach on the future.
 Global mobile phone subscriptions exceeded 2 billion in 2013 and are expected
 to reach 8 billion subscriptions by 2019, according to the Ericsson Mobility
 Report ( November 2013 ).
\end_layout

\begin_layout Standard
http://www.cwcsi.com/smartphones-drives-video-usage-increasing-mobile-data-traffic
/
\end_layout

\begin_layout Subsubsection
peer-to-peer
\end_layout

\begin_layout Standard
https://en.wikipedia.org/wiki/Peer-to-peer
\end_layout

\begin_layout Standard
The Peer-to-peer (P2P) is a point to point application architecture where
 the data ( or the tasks) are distributed among the peers of the network.
 Each nodes are equally responsible and of the service provided and get
 a fraction of the task or the data to take care of.
 They are said to form a peer-to-peer network of nodes.
\end_layout

\begin_layout Standard
The Peers are using and serving the resources of the network.
 They make a part of their resources network, such as disk storage or network
 bandwidth, available for the other peers.
 In contrast to the traditional client-server model in which the consumption
 and supply of resources is divided.
 
\end_layout

\begin_layout Paragraph
History
\end_layout

\begin_layout Standard
While P2P systems had previously been used in many application domains,[3]
 this architecture became famous with the file sharing system : Napster.
 The music service, originally released in 1999.
 The original company ran into legal difficulties over copyright infringement,
 ceased operations and was finnally bought by Roxio then Rhapsody.
 The original service is now a music store, but the peer-to-peer concept
 gave birth to a lot of following companies and projects like : Gnutella,
 Freenet, Kazaa, Bearshare, LimeWire, Scour, Grokster, Madster, and eDonkey2000.
 some of them didn't stand until now mainly because of copyright issues.
 
\end_layout

\begin_layout Paragraph
Potential
\end_layout

\begin_layout Standard
The concept of Napster has inspired new structures and philosophies in many
 areas of human interaction.
 In such social contexts, peer-to-peer as a meme refers to the egalitarian
 social networking that has emerged throughout society, enabled by Internet
 technologies in general.
\end_layout

\begin_layout Standard
Emerging collaborative P2P systems gives more power and possibilities to
 the system a network peers involved in a service than the hability of a
 single service to acheive something individually.
 [2]
\end_layout

\begin_layout Paragraph
drawbaks
\end_layout

\begin_layout Standard
startup time efficiency / coordination
\end_layout

\begin_layout Subsubsection
streaming websites
\end_layout

\begin_layout Standard
https://en.wikipedia.org/wiki/Streaming_media
\end_layout

\begin_layout Standard
Streaming media is multimedia that is constantly received by and presented
 to an end-user while being delivered by a provider.
 The verb "to stream" refers to the process of delivering media in this
 manner; the term refers to the delivery method of the medium, rather than
 the medium itself, and is an alternative to file downloading.
\end_layout

\begin_layout Standard
A client media player can begin to play the data (such as a movie) before
 the entire file has been transmitted.
 Distinguishing delivery method from the media distributed applies specifically
 to telecommunications networks, as most of the delivery systems are either
 inherently streaming (e.g.
 radio, television) or inherently nonstreaming (e.g.
 books, video cassettes, audio CDs).
 For example, in the 1930s, elevator music was among the earliest popularly
 available streaming media; nowadays Internet television is a common form
 of streamed media.
 The term "streaming media" can apply to media other than video and audio
 such as live closed captioning, ticker tape, and real-time text, which
 are all considered "streaming text".
 The term "streaming" was first used in the early 1990s as a better description
 for video on demand on IP networks; at the time such video was usually
 referred to as "store and forward video",[1] which was misleading nomenclature.
\end_layout

\begin_layout Standard
As of 2016, streaming is generally taken to refer to cases where a user
 watches digital video content and/or listens to digital audio content on
 a computer screen and speakers (ranging from a desktop computer to a smartphone
) over the Internet.
 With streaming content, the user does not have to download the entire digital
 video or digital audio file before she starts to watch/listen to it.
 There are challenges with streaming content on the Internet.
 If the user does not have enough bandwidth in her Internet connection,
 she may experience stops in the content and some users may not be able
 to stream certain content due to not having compatible computer or software
 systems.
 As of 2016, popular streaming website include YouTube, which contains video
 and audio files on a huge range of topics and Netflix, which streams movies
 and TV shows.
\end_layout

\begin_layout Standard
Live streaming refers to Internet content delivered in real-time, as events
 happen, much as live television broadcasts its contents over the airwaves
 via a television signal.
 Live internet streaming requires a form of source media (e.g.
 a video camera, an audio interface, screen capture software), an encoder
 to digitize the content, a media publisher, and a content delivery network
 to distribute and deliver the content.
 Live streaming does not need to be recorded at the origination point, although
 it frequently is.
\end_layout

\begin_layout Paragraph
History
\end_layout

\begin_layout Standard
In the early 1920s, George O.
 Squier was granted patents for a system for the transmission and distribution
 of signals over electrical lines[2] which was the technical basis for what
 later became Muzak, a technology streaming continuous music to commercial
 customers without the use of radio.
 Attempts to display media on computers date back to the earliest days of
 computing in the mid-20th century.
 However, little progress was made for several decades, primarily due to
 the high cost and limited capabilities of computer hardware.
 From the late 1980s through the 1990s, consumer-grade personal computers
 became powerful enough to display various media.
 The primary technical issues related to streaming were: having enough CPU
 power and bus bandwidth to support the required data rates and creating
 low-latency interrupt paths in the operating system to prevent buffer underrun
 and thus enable skip-free streaming of the content.
 However, computer networks were still limited in the mid-1990s, and audio
 and video media were usually delivered over non-streaming channels, such
 as by downloading a digital file from a remote server and then saving it
 to a local drive on the end user's computer or storing it as a digital
 file and playing it back from CD-ROMs.
\end_layout

\begin_layout Paragraph
Bandwidth and storage 
\end_layout

\begin_layout Standard
Unicast connections require multiple connections from the same streaming
 server even when it streams the same content
\end_layout

\begin_layout Standard
A broadband speed of 2 Mbit/s or more is recommended for streaming standard
 definition video without experiencing buffering or skips, especially live
 video,[10] for example to a Roku, Apple TV, Google TV or a Sony TV Blu-ray
 Disc Player.
 5 Mbit/s is recommended for High Definition content and 9 Mbit/s for Ultra-High
 Definition content.[11] Streaming media storage size is calculated from
 the streaming bandwidth and length of the media using the following formula
 (for a single user and file) requires a storage size in megabytes which
 is equal to length (in seconds) × bit rate (in bit/s) / (8 × 1024 × 1024).
 For example, one hour of digital video encoded at 300 kbit/s (this was
 a typical broadband video in 2005 and it was usually encoded in a 320 ×
 240 pixels window size) will be: (3,600 s × 300,000 bit/s) / (8×1024×1024)
 requires around 128 MB of storage.
\end_layout

\begin_layout Standard
If the file is stored on a server for on-demand streaming and this stream
 is viewed by 1,000 people at the same time using a Unicast protocol, the
 requirement is 300 kbit/s × 1,000 = 300,000 kbit/s = 300 Mbit/s of bandwidth.
 This is equivalent to around 135 GB per hour.
 Using a multicast protocol the server sends out only a single stream that
 is common to all users.
 Therefore, such a stream would only use 300 kbit/s of serving bandwidth.
 See below for more information on these protocols.
 The calculation for live streaming is similar.
 Assuming that the seed at the encoder is 500 kbit/s and if the show lasts
 for 3 hours with 3,000 viewers, then the calculation is number of MBs transferr
ed = encoder speed (in bit/s) × number of seconds × number of viewers /
 (8*1024*1024).
 The results of this calculation are as follows: number of MBs transferred
 = 500 x 1024 (bit/s) × 3 × 3,600 ( = 3 hours) × 3,000 (number of viewers)
 / (8*1024*1024) = 1,977,539 MB
\end_layout

\begin_layout Paragraph
multicast vs unicast
\end_layout

\begin_layout Standard
youtube and netflix are in unicast but they use caches limit the data repeating.
\end_layout

\begin_layout Standard
multicast is very good for for TV like streaming but doesn't fit requirements
 of VOD 
\end_layout

\begin_layout Standard
https://www.reddit.com/r/networking/comments/2cp356/how_do_streaming_services_like
_netflix_and/
\end_layout

\begin_layout Subsubsection
direct download
\end_layout

\begin_layout Subsubsection
video on demand
\end_layout

\begin_layout Paragraph
netflix
\end_layout

\begin_layout Subsubsection
IPTV
\end_layout

\begin_layout Subsection
Advertisements on the Internet
\end_layout

\begin_layout Subsubsection
Ads history
\end_layout

\begin_layout Paragraph
Advertisement definition
\end_layout

\begin_layout Subparagraph
defeinition
\end_layout

\begin_layout Standard
From Latin, ad vertere : "to turn toward", the advertisement is a marketing
 communication to promote or sell something, usually a business's product
 or service.
 The purpose of advertisement can also to make sure that employees or shareholde
rs believe in the company.
 To be short, the advertisement is a way to convince a specific public to
 have a specific behavior ( source wiki ?) : buy a product, elect someone,
 incitement to reduce speed while driving, etc.
 
\end_layout

\begin_layout Standard
the sponsors are usually companies that are looking to improve their brand
 image or their sells.
 It could also be governments in a make citizen aware of something ( like
 ecology or safe driving) or political personalities to raise their popularity.
 
\end_layout

\begin_layout Paragraph
from television to the Internet
\end_layout

\begin_layout Standard
If the Internet seems to have conquest most of the planet, the advertisement
 remains in a lot of media.
 Old media such as newspapers, magazines, Television, Radio, outdoor advertising
 or direct mail, are still widely used.
 But more and more people are using internet and the advertisement follow.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{table}[] 
\backslash
centering 
\backslash
caption{My caption} 
\backslash
label{my-label} 
\backslash
begin{tabular}{lll} 
\backslash
textbf{media} & 
\backslash
textbf{2015} & 
\backslash
textbf{2016} 
\backslash

\backslash
 television & 37,7
\backslash
% & 34,8
\backslash
% 
\backslash

\backslash
 online & 29,1
\backslash
% & 36,6
\backslash
% 
\backslash

\backslash
 news & 19,3
\backslash
% & 15,4
\backslash
% 
\backslash

\backslash
 poster & 6,8
\backslash
% & 6,6
\backslash
% 
\backslash

\backslash
 Radio & 6,5
\backslash
% & 5,9
\backslash
% 
\backslash

\backslash
 Cinema & 0,6
\backslash
% & 0,7
\backslash
% 
\backslash
end{tabular} 
\backslash
end{table}%%source https://fr.wikipedia.org/wiki/Publicit%C3%A9#cite_note-1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
new media such as blogs, websites, or web-videos have recently been conquered
 by the sponsors.
 But bigger implicatinon as to come in the future as the [ growing demographic
 ]
\end_layout

\begin_layout Standard
With the Internet came many new advertising opportunities.
 Popup, Flash, banner, Popunder, advergaming, and email advertisements (all
 of which are often unwanted or spam in the case of email) are now commonplace.
 Particularly since the rise of "entertaining" advertising, some people
 may like an advertisement enough to wish to watch it later or show a friend.[cit
ation needed] In general, the advertising community has not yet made this
 easy, although some have used the Internet to widely distribute their ads
 to anyone willing to see or hear them.
 In the last three-quarters of 2009 mobile and internet advertising grew
 by 18% and 9% respectively.
 Older media advertising saw declines: -10.1% (TV), -11.7% (radio), -14.8%
 (magazines) and -18.7% (newspapers).
 ( source wikipedia ) .
\end_layout

\begin_layout Standard
In the past, the most efficient way to deliver a message was to emit it
 to the biggest possible public.
 From now on, advertisers will have an increasing ability to reach specific
 audiences.
 The usage of tracking, customer profiling and the growing popularity of
 niche content gives a a number of more specific and smaller market target.
 However this advertisement is more segmented but much better defined ands
 so it's much more efficient.
 With an agreement with a specialist blog writer in a a specific domain,
 advertisers are able to comunicate through famous specialists delivering
 interresting and and specialised advices including marketed products to
 passionates.
 With this scennario, the message commuincated by the brand, usually delivered
 in a top down topology on tellevisoin, is now certified as a good advice
 by a specialist of the area.
 The impact of the message would much more better on internet than with
 television.
\end_layout

\begin_layout Standard
Among others, Comcast Spotlight is one such advertiser employing this method
 in their video on demand menus.
 These advertisements are targeted to a specific group and can be viewed
 by anyone wishing to find out more about a particular business or practice,
 from their home.
 This causes the viewer to become proactive and actually choose what advertiseme
nts they want to view.[65]
\end_layout

\begin_layout Standard
Google AdSense is an example of niche marketing.
 Google calculates the primary purpose of a website and adjusts ads accordingly;
 it uses key words on the page (or even in emails) to find the general ideas
 of topics disused and places ads that will most likely be clicked on by
 viewers of the email account or website visitors.[citation needed].
\end_layout

\begin_layout Subsubsection
Advertisement Effect on humans
\end_layout

\begin_layout Standard
neuromarketing
\end_layout

\begin_layout Subsubsection
Nowadays, on Internet ( actual state )
\end_layout

\begin_layout Paragraph
Numbers
\end_layout

\begin_layout Paragraph
croustillant
\end_layout

\begin_layout Paragraph
Money spent
\end_layout

\begin_layout Standard
In 2015, the world spent an estimate of US$592.43 billion on advertising.[4]
 Internationally, the largest ("big four") advertising conglomerates are
 Interpublic, Omnicom, Publicis, and WPP.[5] ( https://en.wikipedia.org/wiki/Advert
ising):
\end_layout

\begin_layout Standard
money for 1 ad .
 for 1 video, etc...
 
\end_layout

\begin_layout Subsection
Aletnatives
\end_layout

\begin_layout Subsubsection
Adblockers
\end_layout

\begin_layout Standard
It became difficult to rbowse the internet without being bombed with advertising
 pop ups, frames , etc.
 In order to prevent ourself from these enoyements, a set of addons and
 plugins emerged on each browsers to stop them : the adblockers ( or content
 filtering ).
\end_layout

\begin_layout Standard
wiki: To users, the benefits of ad blocking include quicker loading and
 cleaner looking web pages free from advertisements, lower resource waste
 (bandwidth, CPU, memory, etc.), and privacy benefits gained through the
 exclusion of the tracking and profiling systems of ad delivery platforms.
 Blocking ads can also save substantial amounts of energy.[1][2]
\end_layout

\begin_layout Standard
It is possible for ad-blocking to benefit the natural environment via an
 indirect route.
 This arises because the advertising-and-marketing industry places a strong
 emphasis on building emotional connections with inanimate objects for sale,[3]
 [4] and on creating the urge to buy immediately.[5] [6] With the average
 person seeing more than 5000 advertisements every day, and with many of
 these being from online sources,[7] and with each ad promising viewers
 that their lives will be improved if they buy what is being promoted, [8]
 [9] [10] it is reasonable to expect that some people will end up buying
 items which they may not actually need.[11] If these items then end up being
 disposed of without actually being used, then the environmental impacts
 of waste disposal will inevitably arise.
 Because advertisements are very carefully crafted to target weaknesses
 in human psychology,[12] [3] it therefore follows that a reduction in advertise
ments viewed would result in less waste to dispose of.
\end_layout

\begin_layout Standard
Unwanted advertising can also harm the advertisers themselves if the users
 become irritated by the ads.
 Irritated users might make a conscious effort to avoid the goods and services
 of firms with annoying ads.[13]
\end_layout

\begin_layout Standard
For users not interested in making purchases, the blocking of ads can also
 save time.
 Any ad that appears on a website exerts a toll on the user's attention
 budget, since each ad enters the user's field of view and must either be
 consciously ignored or closed, or dealt with in some other way.
 A user who is strongly focused on reading solely the content that he/she
 is seeking likely has no desire to be diverted by advertisements that seek
 to sell unneeded or unwanted goods and services.[14] In contrast, users
 who are actively seeking items to purchase might appreciate advertising,
 in particular targeted ads.[15]
\end_layout

\begin_layout Standard
Ad-blocking can also save money for the user.
 If a user's personal time is worth one dollar per minute, and if unsolicited
 advertising adds an extra minute to the time that the user requires for
 reading the webpage (i.e.
 the user must manually identify the ads as ads, and then click to close
 them, or use other techniques to either deal with them, all of which tax
 the user's intellectual focus in some way),[16] then the user has effectively
 lost one dollar of time in order to deal with ads that might generate a
 few fractional pennies of display-ad revenue for the website owner.
 The problem of lost time can rapidly spiral out of control if malware accompani
es the ads.[17][18] This is discussed in more detail below.
\end_layout

\begin_layout Standard
Another important aspect is improving security; online advertising subjects
 users to a higher risk of infecting their devices than surfing pornography
 sites.[19] In a high-profile case, malware was distributed through advertisement
s provided to YouTube by a malicious customer of Google's Doubleclick.[20][21]
 In August 2015, a 0-day exploit in the Firefox browser was discovered in
 an advertisement on a website.[22] When Forbes required users to disable
 ad blocking before viewing their website, those users were immediately
 served with pop-under malware.[23]
\end_layout

\begin_layout Standard
Users who pay for total transferred bandwidth ("capped" or pay-for-usage
 connections) including most mobile users worldwide, have a direct financial
 benefit from filtering an ad before it is loaded.
 Streaming audio and video, even if they are not presented to the user interface
, can rapidly consume gigabytes of transfer especially on a faster 4G connection.
 Users without a data plan often pay by the megabyte, the cost of tolerating
 ads can be quite high.
 Even fixed connections are often subject to usage limits, especially the
 faster connections (100Mbit/s and up) which can quickly saturate a network
 if filled by streaming media.[citation needed]
\end_layout

\begin_layout Standard
It is a known problem with most web browsers, including Firefox, that restoring
 sessions often plays multiple embedded ads at once.[24] Using an advertisement
 blocker stops such behaviour.
\end_layout

\begin_layout Standard
--
\end_layout

\begin_layout Standard
Popularity 
\end_layout

\begin_layout Standard
The number of monthly active adblocking users, as estimated by PageFair.
\end_layout

\begin_layout Standard
Use of mobile and desktop ad blocking software designed to remove traditional
 advertising grew by 41% worldwide and by 48% in the U.S.
 between Q2 2014 and Q2 2015.[25]
\end_layout

\begin_layout Standard
As of Q2 2015, 45 million Americans were using ad blockers.[25] In a survey
 research study released Q2 2016, MetaFacts reported 72 million Americans,
 12.8 million adults in the UK, and 13.2 million adults in France were using
 ad blockers on their PCs, Smartphones, or Tablets.
\end_layout

\begin_layout Standard
In March 2016, the Internet Advertising Bureau reported that UK adblocking
 was already at 22% among over-18s.[26][27]
\end_layout

\begin_layout Subsubsection
Anti-ads movement
\end_layout

\begin_layout Standard
The profiling on internet is became very popular to do adverstisement .
 The tracking of activity on internet has began quite profitable for the
 announcers.
 As a result, some public organisation and groups are criticizing the phenomenon.
\end_layout

\begin_layout Paragraph
Playlist launching
\end_layout

\begin_layout Paragraph
Non-commercialized video
\end_layout

\begin_layout Standard
Some content producers like Usul2000, even decidedd to 
\end_layout

\begin_layout Paragraph
Anti-Tracking
\end_layout

\begin_layout Standard
duckduckgo
\end_layout

\begin_layout Subsubsection
An other way to finance creators : patronage
\end_layout

\begin_layout Standard
Recentently, an old trend came back on the front of scene :the patronage.
 Indeed, it is a way to pay people that produce content on the video hosting
 websites.
 
\end_layout

\begin_layout Standard
In 2013, a few websites emerged with the idea to retribute content makers
 like musiciens or comic short movies with tips and live from that.
 tipeee .com in France and Patreon in US.
 
\end_layout

\begin_layout Standard
Their growth is impressive, Tipeee already gathers more than 524 000 € of
 tips, while Patreon collected 50 Millions $ for its creators members.
 It is clearly called to continue as People want to support the free creators
 and give in order to get nice videos.
 Everybody understand that without money, creators cannot continue to provide
 freely good content.
 so there is 2 solutions : accept the ads or tip the creator.
\end_layout

\begin_layout Section
The direct Download is riding high
\end_layout

\begin_layout Subsection
Survey
\end_layout

\begin_layout Standard
show about : people need a fast delivery.z
\end_layout

\begin_layout Subsection
Internet : A mesh network
\end_layout

\begin_layout Standard
History : 
\end_layout

\begin_layout Standard
By nature, the Internet is a mesh network .
 Each points has an address to connect, exchange and publish information.
 This was the case in the beginning of Internet when the actors were professiona
l ones.
 However , today the situation isn't the same anymore.
 Youtube, a video hosting website, and Facebook, a social network website
 hosting videos, are respectively the 2nd and the 3rd most visited websites
 in the world.
 It means that the mesh network is turning into a convergent network.
 ( source : http://www.alexa.com/topsites - Alexa Internet, Inc.
 is a California-based company that provides commercial web traffic data
 and analytics.
 It is a wholly owned subsidiary of Amazon.com.
 source wikipedia).
\end_layout

\begin_layout Standard
It isn't a porblem in itself.
 The actors of the Internet are acting according to the economy model we
 are living in.
 It could be a problem in terms of data traffic, data control , privacy
 control.
\end_layout

\begin_layout Subsubsection
A Recentralization of the network
\end_layout

\begin_layout Standard
Unlike the historical Mainframe where all the data where stored and computed
 in a central place, the Internet nature is to be a mesh network : decentralized.
\end_layout

\begin_layout Standard
As it is not a problem in itself, concentrate the world wide web in a few
 nodes is costly: hundreds of millions of connexions per second to one node
 doesn't come without a price.
 
\end_layout

\begin_layout Paragraph
ancient vision of the internet
\end_layout

\begin_layout Standard
https://en.wikipedia.org/wiki/Peer-to-peer
\end_layout

\begin_layout Standard
Tim Berners-Lee's vision for the World Wide Web was close to a P2P network
 in that it assumed each user of the web would be an active editor and contribut
or, creating and linking content to form an interlinked "web" of links.
 The early Internet was more open than present day, where two machines connected
 to the Internet could send packets to each other without firewalls and
 other security measures.[4] This contrasts to the broadcasting-like structure
 of the web as it has developed over the years.[6] As a precursor to the
 Internet, ARPANET was a successful client-server network where "every participa
ting node could request and serve content." However, ARPANET was not self-organiz
ed, and it lacked the ability to "provide any means for context or content-based
 routing beyond 'simple' address-based routing."[7]
\end_layout

\begin_layout Paragraph
bottle-neck network struggling
\end_layout

\begin_layout Standard
http://www.csmonitor.com/Technology/2015/1223/YouTube-says-T-Mobile-is-downgrading
-videos.-Does-that-violate-net-neutrality-video 
\end_layout

\begin_layout Standard
The amount of data downloaded and uploaded is http://www.slate.fr/story/67161/goog
le-free-video-interconnexion-rame
\end_layout

\begin_layout Subparagraph
Infrastructure: as the big mainframe serving all the videos, YouTube records
 five hundred hours of video per minutes, at the time I am writing the thesis
 and could reach 700h next year.
 ( source: http://tubularinsights.com/hours-minute-uploaded-youtube/ ).
 The company can handle the cost of storage and the necessary bandwidth
 with advertisement money.
 
\end_layout

\begin_layout Paragraph
Data Control
\end_layout

\begin_layout Itemize
central point
\end_layout

\begin_layout Itemize
Data owner?
\end_layout

\begin_layout Itemize
youtube algo copyright
\end_layout

\begin_layout Paragraph
market examples
\end_layout

\begin_layout Itemize
Centralized: 
\end_layout

\begin_deeper
\begin_layout Itemize
Deezer / Spotify 
\end_layout

\begin_deeper
\begin_layout Itemize
Youtube / torrents
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/m/Desktop/Screenshot at 2016-08-23 22:05:17.png
	width 70page%
	height 70page%
	clip
	rotateOrigin center

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
increasing of Internet users over the year
\end_layout

\end_inset


\end_layout

\end_inset

 
\end_layout

\begin_layout Subsection
Sum up
\end_layout

\begin_layout Standard
The problem is constituted by the traffic dragged to a few hosting platforms
 like YouTube, Facebook and produce a clogging of the network.
 Although this one would be more efficient if the hosting of videos would
 be spread over the network.
 
\end_layout

\begin_layout Standard
An other problem risen by the survey is about the speed of watching.
 the big advantage of big servers like YouTube lies in the fast delivery
 of videos.
 With a computing power at the level of the companies hosting these sites
 , with the means employed there the delivery can be fast.
\end_layout

\begin_layout Section
Technical Context
\end_layout

\begin_layout Subsection
JPaxos
\end_layout

\begin_layout Standard
JPaxos is a Java library and runtime system for efficient state machine
 replication.
 With JPaxos it is very easy to make a user-provided service tolerant to
 machine crashes.
 Our system supports the crash- recovery model of failure and tolerates
 message loss and communication delays.
 State machine replication is a general method for implementing a fault-tolerant
 service by replicat- ing it on separate machines and coordinating client
 interactions with these replicas (or copies).
 The physical isolation of machines in a distributed system ensures that
 failures of server replicas are independent, as required.
 As long as there are enough of non-faulty replicas, the service is guaranteed
 to be provided.
 JPaxos makes the following assumptions about the replicated service: •
 deterministic behaviour, i.e.
 multiple copies of the service begun in the start state, receiving the
 same inputs in the same order will arrive at the same state having generated
 the same outputs • non-Byzantine failures, i.e.
 a service machine can only crash • crash-recovery supported, i.e.
 after crash, the service can be restarted with the same IP address.
\end_layout

\begin_layout Subsection
peer-to-peer
\end_layout

\begin_layout Standard
Peer-to-peer file sharing is the distribution and sharing of digital media
 using peer-to-peer (P2P) networking technology.
 P2P file sharing allows users to access media files such as books, music,
 movies, and games using a P2P software program that searches for other
 connected computers on a P2P network to locate the desired content.[1] The
 nodes (peers) of such networks are end-user computers and distribution
 servers (not required).
\end_layout

\begin_layout Standard
Peer-to-peer file sharing technology has evolved through several design
 stages from the early networks like Napster, which popularized the technology,
 to the later models like the BitTorrent protocol.
 Microsoft uses it for Update distribution (Windows 10) and online playing
 games (e.g.
 the mmorpg Skyforge[2]) use it as their content distribution network for
 downloading large amounts of data without incurring the dramatic costs
 for bandwidth inherent when providing just a single source.
\end_layout

\begin_layout Standard
Several factors contributed to the widespread adoption and facilitation
 of peer-to-peer file sharing.
 These included increasing Internet bandwidth, the widespread digitization
 of physical media, and the increasing capabilities of residential personal
 computers.
 Users were able to transfer either one or more files from one computer
 to another across the Internet through various file transfer systems and
 other file-sharing networks.[1]
\end_layout

\begin_layout Subsubsection
protocol
\end_layout

\begin_layout Subsubsection
Projects
\end_layout

\begin_layout Paragraph
Popcorn Time following projects
\end_layout

\begin_layout Subparagraph
popcorntimes
\end_layout

\begin_layout Standard
Popcorn Time is a multi-platform, free software BitTorrent client that includes
 an integrated media player.
 The applications provide a free alternative to subscription-based video
 streaming services (such as Netflix).
 Popcorn Time uses sequential downloading to stream video listed by several
 torrent websites (although other trackers can be added and used manually).
\end_layout

\begin_layout Standard
Following its inception, Popcorn Time quickly received positive media attention,
 with some comparing the app to Netflix for being easy to use.[5] After this
 increase in popularity, the program was abruptly taken down by its original
 developers on March 14, 2014, due to pressure from the MPAA.[6] Since then,
 the program has been forked several times with several other development
 teams such as the Butter Project to maintain the program and produce new
 features.
 The original Popcorn Time team endorsed the popcorntime.io fork, and picked
 it as the successor to the official Popcorn Time as of August 2015.[7] In
 October 2015, the MPAA obtained a court injunction from Canada to stop
 the Canadian programmers of popcorntime.io,[8] and later obtained the domain
 name,[9] although the project reappeared on a new website popcorntime.sh.[10][11]
[12]
\end_layout

\begin_layout Subparagraph
Butter project
\end_layout

\begin_layout Standard
Butter Project or simply Butter is a suite of open source desktop and mobile
 applications that allow video-streaming over the BitTorrent protocol.[1]
 The project was first made public on the 23rd of October 2015.[2] The aim
 is to create a completely legal base which other applications can use to
 provide streaming functionality.[2]
\end_layout

\begin_layout Standard
Butter Project was created as a split from Popcorn Time when the latter
 met legal difficulties — with Butter Project aiming to retain development
 of only expressly legal and permissible portions of the code-base, relating
 to video-streaming.
 The developers have asserted Butter Project will not use any of the popcorntime.
io infrastructure.[3] Butter Project is not aimed at allowing copyright infringem
ent, but aims to build the groundworks for streaming video over BitTorrent.[4]
 By having a legal portion which remains on GitHub the creators hope they
 can get more developers involved.[4]
\end_layout

\begin_layout Standard
By default Butter can play content from VODO which carries free videos,
 but will also be configurable to allow for custom sources of video.[5]
\end_layout

\begin_layout Subsubsection
security
\end_layout

\begin_layout Standard
Security and trust
\end_layout

\begin_layout Standard
Peer-to-peer systems pose unique challenges from a computer security perspective.
\end_layout

\begin_layout Standard
Like any other form of software, P2P applications can contain vulnerabilities.
 What makes this particularly dangerous for P2P software, however, is that
 peer-to-peer applications act as servers as well as clients, meaning that
 they can be more vulnerable to remote exploits.[31] Routing attacks
\end_layout

\begin_layout Standard
Also, since each node plays a role in routing traffic through the network,
 malicious users can perform a variety of "routing attacks", or denial of
 service attacks.
 Examples of common routing attacks include "incorrect lookup routing" whereby
 malicious nodes deliberately forward requests incorrectly or return false
 results, "incorrect routing updates" where malicious nodes corrupt the
 routing tables of neighboring nodes by sending them false information,
 and "incorrect routing network partition" where when new nodes are joining
 they bootstrap via a malicious node, which places the new node in a partition
 of the network that is populated by other malicious nodes.[32] Corrupted
 data and malware See also: Data validation and Malware
\end_layout

\begin_layout Standard
The prevalence of malware varies between different peer-to-peer protocols.
 Studies analyzing the spread of malware on P2P networks found, for example,
 that 63% of the answered download requests on the Limewire network contained
 some form of malware, whereas only 3% of the content on OpenFT contained
 malware.
 In both cases, the top three most common types of malware accounted for
 the large majority of cases (99% in Limewire, and 65% in OpenFT).
 Another study analyzing traffic on the Kazaa network found that 15% of
 the 500,000 file sample taken were infected by one or more of the 365 different
 computer viruses that were tested for.[33]
\end_layout

\begin_layout Standard
Corrupted data can also be distributed on P2P networks by modifying files
 that are already being shared on the network.
 For example, on the FastTrack network, the RIAA managed to introduce faked
 chunks into downloads and downloaded files (mostly MP3 files).
 Files infected with the RIAA virus were unusable afterwards and contained
 malicious code.
 The RIAA is also known to have uploaded fake music and movies to P2P networks
 in order to deter illegal file sharing.[34] Consequently, the P2P networks
 of today have seen an enormous increase of their security and file verification
 mechanisms.
 Modern hashing, chunk verification and different encryption methods have
 made most networks resistant to almost any type of attack, even when major
 parts of the respective network have been replaced by faked or nonfunctional
 hosts.[35]
\end_layout

\begin_layout Subsection
IPFS
\end_layout

\begin_layout Standard
InterPlanetary File System (IPFS) is a content-addressable, peer-to-peer
 hypermedia distribution protocol.
 Nodes in the IPFS network form a distributed file system.
 IPFS is an open source project developed by Protocol Labs with help from
 the open source community.[1] It was initially designed by Juan Benet.[2]
 The goal of IPFS is to facilitate a permanent and decentralized method
 of storing and sharing files.[3]
\end_layout

\begin_layout Subsection
JavaScript technologies
\end_layout

\begin_layout Itemize
Which tools?
\end_layout

\begin_deeper
\begin_layout Itemize
Player Torrent: Popcorn Time 
\end_layout

\begin_layout Itemize
Client Torrent web: Deluge 
\end_layout

\begin_layout Itemize
Tracker Torrent: OpenBittorent
\end_layout

\begin_layout Itemize
Distributed Server: JPaxos : concurrent server access manager Data Replication
\end_layout

\end_deeper
\begin_layout Itemize
Butter Project: 
\end_layout

\begin_deeper
\begin_layout Itemize
NodeJS
\end_layout

\begin_layout Itemize
npm 
\end_layout

\begin_layout Itemize
(Angular ) 
\end_layout

\begin_layout Itemize
Grunt 
\end_layout

\begin_layout Itemize
Gulp
\end_layout

\end_deeper
\begin_layout Subsection
Others
\end_layout

\begin_layout Chapter
Concept and Design of the System
\end_layout

\begin_layout Standard
In this part, I will try to explain how I will propose an answer to the
 problem stated.
\end_layout

\begin_layout Section
Conception Process methodology ( Quality )
\end_layout

\begin_layout Subsection
scrum
\end_layout

\begin_layout Subsection
Organisation
\end_layout

\begin_layout Subsection
trello
\end_layout

\begin_layout Subsection
pomodoro
\end_layout

\begin_layout Section
Concept
\end_layout

\begin_layout Subsection
The market demand
\end_layout

\begin_layout Standard
The expectations are taken from the survey and from the background study
 part that explain why these folowing expectations has been choosen.
\end_layout

\begin_layout Subsubsection
No advertisement
\end_layout

\begin_layout Standard
The first of the expectations of the software is to not have advertisement.
 
\end_layout

\begin_layout Paragraph
Market growing need
\end_layout

\begin_layout Standard
As it is discussed in the first part, ads have unwanted effects on watchers
 and we would like to prevent them from these effects as there is a a growing
 demand of not advertised content ( e.g.
 first part ) .
 
\end_layout

\begin_layout Paragraph
a Free service
\end_layout

\begin_layout Subparagraph
emerge on the market
\end_layout

\begin_layout Standard
We would like to provide a service free for the user.
 On the market of video hosting , most of the actors are free of costs.
 Our solution would not be attractive if we would ask users to pay.
 Some actors like Netflix are not free but they provide copyrighted series
 inan easy way that is not our target.
\end_layout

\begin_layout Standard
In order to emerge on the market , we would need to be free as Youtube.
 
\end_layout

\begin_layout Subparagraph
Not supporting the hosting
\end_layout

\begin_layout Standard
the problem is that providing a free service doesn't get along with the
 previous point.
 Indeed , Youtube finance the hosting cost of its service with the advertisement.
 We tried to conciliate both of the aspect in our project.
 That's means supporting not supporting the hosting cost of the video.
\end_layout

\begin_layout Subsubsection
quality service
\end_layout

\begin_layout Standard
As it has been reported on the survey, one important aspect of a video hosting
 website is the speed delivery and quality of the video.
 In that sens we will try to optimze as its best the speed of delivering
 and the quality of the supplyed videos.
\end_layout

\begin_layout Subsubsection
Simple
\end_layout

\begin_layout Standard
The product should be easy to use.
 The user interface is most important thing in a such application ...
\end_layout

\begin_layout Subsubsection
Safe / a respectful service
\end_layout

\begin_layout Standard
Obviously the application should be secure.
 It implies not possiblity to track people or to be able to get personnal
 data throught it.
\end_layout

\begin_layout Itemize
Privacy
\end_layout

\begin_layout Itemize
no ads needed
\end_layout

\begin_layout Itemize
Distributed video platform: 
\end_layout

\begin_deeper
\begin_layout Itemize
Computer network ( Skype , torrents, popcorntime ) 
\end_layout

\begin_layout Itemize
Supply Videos : access speed 
\end_layout

\begin_layout Itemize
Distribution over the network Manage video samples Central Website
\end_layout

\end_deeper
\begin_layout Subsubsection
an Internet compatible service
\end_layout

\begin_layout Standard
One of the objectives of this project is to respect the mesh network philosophy.
 We would like to make prevailing a flat consumption of the internet.
 It means that it should propose a decentralization of the Internet as it
 has been made for at the origin.
\end_layout

\begin_layout Subsubsection
a reliable service
\end_layout

\begin_layout Paragraph
target fragile networks
\end_layout

\begin_layout Standard
The aim of this project is also to give access to video hosting enjoyment
 to the poorly connected areas.
 In a lot of places in the world like India or Africa, the internet connection
 is not a certitude.
 
\end_layout

\begin_layout Paragraph
failure resistant
\end_layout

\begin_layout Standard
We would like our software to be as much failure resistant as possible.
 
\end_layout

\begin_layout Paragraph
scalability
\end_layout

\begin_layout Standard
The software should also be prepared to absorb a big growth of users without
 crashing of slow the serving.
 It would a big advantage compared to a lot of online streaming website
 that deliver content very slowly on the critical hours.
\end_layout

\begin_layout Itemize
Invert growth paradigm: 
\end_layout

\begin_deeper
\begin_layout Itemize
More People → More Fun 
\end_layout

\begin_layout Itemize
No Internet? No problem..
 ( Africa , parts of the web where efficiency matters)
\end_layout

\end_deeper
\begin_layout Subsection
Marketing answer
\end_layout

\begin_layout Subsubsection
An emerging market
\end_layout

\begin_layout Subsubsection
An other way to see views
\end_layout

\begin_layout Subsubsection
Economic plan
\end_layout

\begin_layout Subsection
The technical answer
\end_layout

\begin_layout Subsubsection
User supported hosting
\end_layout

\begin_layout Standard
In order to be able to emerge on the market , it is necessary to opt for
 a free service for the users.
 A paid service would have too much difficulty to get known.
 However we should take into consideration the cost of hosting files.
 As we want a free service, we cannot invest in servers.
 We can't rely on money entries generated by advertisement either.
 The hosting of the service has to be powered mostly by the users.
 
\end_layout

\begin_layout Subsubsection
Network management 
\end_layout

\begin_layout Standard
a way to ensure the speed of high definition videos and the best repartition
 of the videos among the network.
 We may use optimization algorithms.
\end_layout

\begin_layout Subsubsection
Video player
\end_layout

\begin_layout Standard
To display the content of the video, we need a video downloaded and a video
 player that would be able to play the video as it is not finished to load
 yet.
 
\end_layout

\begin_layout Subsubsection
Quality content 
\end_layout

\begin_layout Standard
We will try to get the best quality content.
\end_layout

\begin_layout Section
The Design
\end_layout

\begin_layout Standard
In this part, I will expose the design architecture
\end_layout

\begin_layout Subsection
tools review
\end_layout

\begin_layout Standard
To build the application , I will connect several tools.
\end_layout

\begin_layout Subsubsection
Decentralized hosting, ad-free, high quality videos, reliable
\end_layout

\begin_layout Standard
The main tool is used ot build the application is the peer-to-peer protocol.
 It answer a lot problems I tried to solve.
 
\end_layout

\begin_layout Paragraph
Advantages
\end_layout

\begin_layout Standard
It allow users to host the files they are viewing.
 
\end_layout

\begin_layout Standard
There is a variety of softwares implementing it in any languages, usually
 free and open-source.
 most of the bittorrent client doesn't has any advertisement.
\end_layout

\begin_layout Standard
It is reliable : it is used by more than 10 years.
 We already know the problems it has, the drawbacks and the advantages.
\end_layout

\begin_layout Standard
The way to provide torrent files has been discribed by its createor ( bittorrent.
com) and it consits in serving a website to host a the torrent files with
 a page of description for each file.
 Then you need to open the file with a client supporting the torrent protocol,
 wait for the download and finnally be able to play it.
\end_layout

\begin_layout Paragraph
Drawbacks
\end_layout

\begin_layout Standard
This way was convenient in the past but nowdays , with the actual bandwidth,
 we are used to get the content faster.
 A lot of serving file website arrived.
 Even if it is senseless due to the traffic it generate to a few nodes of
 the network.
\end_layout

\begin_layout Standard
Today, according to the survey and wathcing the market, people want to check
 videos and directly watch it.
 So, it needs an overlayer to improve the torrent protocol to get faster.
\end_layout

\begin_layout Paragraph
tool used
\end_layout

\begin_layout Standard
For the needs of this project, I decided to use Tturns Bittorrent library
 ( source ) .
 It is a minimalist bittorrent client and software library that just do
 its job and not more.
\end_layout

\begin_layout Subsubsection
filling the gap of the torrent 
\end_layout

\begin_layout Standard
As only a torrent client would not be sufficient, it is neceessary to improve
 the torrent by adding other tools to 
\end_layout

\begin_layout Paragraph
Network management
\end_layout

\begin_layout Standard
In order to improve the download time due to the torrent procol.
 My idea was to increase the number of copies of a file if it doesn't have
 enough and ( maybe to decrease the number of copies.
 I chose to manage the distribution of the torrent files over the network.
 I would like to make more available the begining of each video file in
 order to improve availlability of this and by the same manneer , the speed
 of download.
\end_layout

\begin_layout Standard
JPAXOS def?
\end_layout

\begin_layout Paragraph
Instant Video player
\end_layout

\begin_layout Standard
Also , I needed a video player that would be able to play videos without
 the need of the video to be full.
 I found butter project that is a similar project but not focused on the
 network management.
 I based my development on this tool as a module in oreder to make a modular
 tool available to everything Torrent client.
\end_layout

\begin_layout Standard
Butter Project
\end_layout

\begin_layout Standard
Butter Project or simply Butter is a suite of open source desktop and mobile
 applications that allow video-streaming over the BitTorrent protocol.[1]
 The project was first made public on the 23rd of October 2015.[2] The aim
 is to create a completely legal base which other applications can use to
 provide streaming functionality.[2]
\end_layout

\begin_layout Standard
Butter Project was created as a split from Popcorn Time when the latter
 met legal difficulties — with Butter Project aiming to retain development
 of only expressly legal and permissible portions of the code-base, relating
 to video-streaming.
 The developers have asserted Butter Project will not use any of the popcorntime.
io infrastructure.[3] Butter Project is not aimed at allowing copyright infringem
ent, but aims to build the groundworks for streaming video over BitTorrent.[4]
 By having a legal portion which remains on GitHub the creators hope they
 can get more developers involved.[4]
\end_layout

\begin_layout Standard
By default Butter can play content from VODO which carries free videos,
 but will also be configurable to allow for custom sources of video.[5]
\end_layout

\begin_layout Paragraph
video sources
\end_layout

\begin_layout Itemize
OpenBittorent OpenTrackers.org Vodo.net Archive.org CCC Media
\end_layout

\begin_layout Itemize
my personnal network
\end_layout

\begin_layout Subsection
Architecture
\end_layout

\begin_layout Standard
In this part I expose how the system has been imagined and how it works.
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement o
overhang 0col%
width "50col%"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/DesignSchemaLatex1.jpg
	lyxscale 70
	width 80page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
application schema
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Normal usage
\end_layout

\begin_layout Standard
Usually, to get a file via torrents, the user should open a torrent file
 with his client application.
 Then the torrent get downloaded in a download folder.
\end_layout

\begin_layout Subsubsection
Application principle 
\end_layout

\begin_layout Paragraph
The client
\end_layout

\begin_layout Standard
The application need to be configured with the folder containing the torrents
 downloaded and the folder containing the downloaded files.
 The Client starts listing all the torrent files and compare them with the
 related downloaded files it finds.
 So that , it can figure out what are the hosted files and send the related
 torrents files to one of the JPaxos servers instances.
 
\end_layout

\begin_layout Standard
It will 
\end_layout

\begin_layout Paragraph
JPaxos server
\end_layout

\begin_layout Chapter
Implementation
\end_layout

\begin_layout Standard
During the implementation part , I tried to maximize the user experience
 and the usability of the application.
 I will first speak about the architecture of the application : I tried
 to keep it as simple as possible.
 Then I will detail the code implementation to show how the application
 works.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Section
Implementation steps
\end_layout

\begin_layout Subsection
technologies aborted
\end_layout

\begin_layout Subsubsection
skypelike
\end_layout

\begin_layout Subsection
timing calculation
\end_layout

\begin_layout Subsubsection
loading time 
\end_layout

\begin_layout Subsubsection
tmps video/ people
\end_layout

\begin_layout Subsubsection
nb people to make it working ( perfs?) 
\end_layout

\begin_layout Subsubsection
Absorbtion de nouveaux medias from yt , etc...
 interconnnection des reseaux
\end_layout

\begin_layout Section
Architecture
\end_layout

\begin_layout Plain Layout
schema
\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/m/pictures/photos/Album_1/thesis/choosen/20160202_180119.jpg
	lyxscale 20
	width 70line%
	rotateAngle -90
	rotateOrigin center

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
First plan
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Implementation
\end_layout

\begin_layout Subsection
a Modular Application
\end_layout

\end_inset


\end_layout

\begin_layout Section
The Client
\end_layout

\begin_layout Subsection
KaClient
\end_layout

\begin_layout Subsubsection
Purpose
\end_layout

\begin_layout Standard
The client class is the main of the application.
 Its function is to give periodical reports of the hosting content of the
 Client to the JPaxos server.
 It also has a composition with the bittorrentClient class that is in charge
 of downloading and sharing torrents.
 
\end_layout

\begin_layout Subsubsection
Process
\end_layout

\begin_layout Standard
Here is a presentation of the actual Client class.
 
\end_layout

\begin_layout Enumerate
The client start by the traditional main static method
\end_layout

\begin_layout Enumerate
then it launches a thread method 
\begin_inset Quotes eld
\end_inset

run
\begin_inset Quotes erd
\end_inset

 where the main client code is executed.
\end_layout

\begin_layout Enumerate
an infinite loop doing a procedural process and finishing by a sleep() timer
 in order to re-execute the loop periodically ( every 10 minutes );
\end_layout

\begin_layout Subsubsection
UML Diagram
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/UML Diagrams/KaClient.png
	rotateOrigin center

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
KaClient UML Diagram
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Code details
\end_layout

\begin_layout Paragraph
The main static method
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public static void main(String[] args) throws IOException, ReplicationException,
 InterruptedException, ClassNotFoundException, NoSuchAlgorithmException
 {
\end_layout

\begin_layout Plain Layout

        instructions(); 
\end_layout

\begin_layout Plain Layout

        KaClient client = new KaClient(); //class instantiation 
\end_layout

\begin_layout Plain Layout

        client.run();    // launch the thread
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
The thread initialization
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

//initialize the torrent manager
\end_layout

\begin_layout Plain Layout

KaTorrentManager tm = new KaTorrentManager(new File("torrents"), 
\end_layout

\begin_layout Plain Layout

		new File("downloads"));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//connect to the client         
\end_layout

\begin_layout Plain Layout

Client paxosClient = new Client();
\end_layout

\begin_layout Plain Layout

paxosClient.connect();
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
The infinite loop
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,float,numbers=left,breaklines=true,tabsize=4"
inline false
status open

\begin_layout Plain Layout

while (true) {
\end_layout

\begin_layout Plain Layout

            //send data downloads             
\end_layout

\begin_layout Plain Layout

			ArrayList<?> list = tm.downloadsStateToArray();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			System.out.println(String.format("DATA SENT 
\backslash
n"+list.toString()));
\end_layout

\begin_layout Plain Layout

			KaCommand command = new KaCommand("String", list);
\end_layout

\begin_layout Plain Layout

            
\end_layout

\begin_layout Plain Layout

			// send     : added /deleted             
\end_layout

\begin_layout Plain Layout

			byte[] response = paxosClient.execute(command.toByteArray());
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

            // receive  : missing torrents
\end_layout

\begin_layout Plain Layout

		    ByteArrayInputStream bais = new ByteArrayInputStream(response);
\end_layout

\begin_layout Plain Layout

            ObjectInputStream ois = new ObjectInputStream(bais);
\end_layout

\begin_layout Plain Layout

	        list = (ArrayList<?>) ois.readObject();
\end_layout

\begin_layout Plain Layout

            System.out.println(String.format("Previous value :
\backslash
n %s", list.toString()));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            // send     : the missing torrents files
\end_layout

\begin_layout Plain Layout

            list = tm.getMissingTorrentsFiles((ArrayList<String>) list);
\end_layout

\begin_layout Plain Layout

            System.out.println(String.format("DATA SENT 
\backslash
n"+list.toString()));
\end_layout

\begin_layout Plain Layout

            command = new KaCommand("File", list);
\end_layout

\begin_layout Plain Layout

            response = paxosClient.execute(command.toByteArray());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            // receive  : new torrents + pieces to dl
\end_layout

\begin_layout Plain Layout

            ois = new ObjectInputStream(new ByteArrayInputStream(response));
\end_layout

\begin_layout Plain Layout

            list = (ArrayList<?>) ois.readObject();
\end_layout

\begin_layout Plain Layout

            System.out.println(String.format("Previous value :
\backslash
n %s", list.toString()));
\end_layout

\begin_layout Plain Layout

     
\end_layout

\begin_layout Plain Layout

            //download them
\end_layout

\begin_layout Plain Layout

            BittorrentClient bc = new BittorrentClient((ArrayList<File>)
 list, tm.getDownloadsDir(), 604800);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            //sleep             
\end_layout

\begin_layout Plain Layout

			Thread.sleep(5000);//would be set to 10 minutes after tests 
\end_layout

\begin_layout Plain Layout

       }
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Code Details
\end_layout

\begin_layout Paragraph
gather added and deleted downloaded files 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

			//send data downloads             
\end_layout

\begin_layout Plain Layout

			ArrayList<?> list = tm.downloadsStateToArray();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			System.out.println(String.format("DATA SENT 
\backslash
n"+list.toString()));
\end_layout

\begin_layout Plain Layout

			KaCommand command = new KaCommand("String", list);
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
send them to the server
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

			// send     : added /deleted             
\end_layout

\begin_layout Plain Layout

			byte[] response = paxosClient.execute(command.toByteArray());
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
get the list of torrent missing torrent files 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

			// send     : added /deleted             
\end_layout

\begin_layout Plain Layout

			byte[] response = paxosClient.execute(command.toByteArray());
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

            // receive  : missing torrents
\end_layout

\begin_layout Plain Layout

		    ByteArrayInputStream bais = new ByteArrayInputStream(response);
\end_layout

\begin_layout Plain Layout

            ObjectInputStream ois = new ObjectInputStream(bais);
\end_layout

\begin_layout Plain Layout

	        list = (ArrayList<?>) ois.readObject();
\end_layout

\begin_layout Plain Layout

            System.out.println(String.format("Previous value :
\backslash
n %s", list.toString()));
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
send the torrent files missing on the server
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

			// send     : the missing torrents files
\end_layout

\begin_layout Plain Layout

            list = tm.getMissingTorrentsFiles((ArrayList<String>) list);
\end_layout

\begin_layout Plain Layout

            System.out.println(String.format("DATA SENT 
\backslash
n"+list.toString()));
\end_layout

\begin_layout Plain Layout

            command = new KaCommand("File", list);
\end_layout

\begin_layout Plain Layout

            response = paxosClient.execute(command.toByteArray());
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
get the torrents to download
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

			// receive  : new torrents + pieces to dl
\end_layout

\begin_layout Plain Layout

            ois = new ObjectInputStream(new ByteArrayInputStream(response));
\end_layout

\begin_layout Plain Layout

            list = (ArrayList<?>) ois.readObject();
\end_layout

\begin_layout Plain Layout

            System.out.println(String.format("Previous value :
\backslash
n %s", list.toString()));
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
launch the download
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

			//download them
\end_layout

\begin_layout Plain Layout

            BittorrentClient bc = new BittorrentClient((ArrayList<File>)
 list, tm.getDownloadsDir(), 604800);
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
sleep
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 //sleep             
\end_layout

\begin_layout Plain Layout

			Thread.sleep(5000);//would be set to 10 minutes after tests 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
KaCommand
\end_layout

\begin_layout Subsubsection
Purpose
\end_layout

\begin_layout Standard
This class execute the command to be serialized and sent to the server.
 This class is used on the server and the client side.
 On the client side, the main methods used are the constructor with plain
 parameters and the method toByteArray that serialize the parameters
\end_layout

\begin_layout Subsubsection
Process
\end_layout

\begin_layout Standard
The KaCommand class is initialized by the KaClient thread with two parameters.
 The first is a String 
\begin_inset Quotes eld
\end_inset

type
\begin_inset Quotes erd
\end_inset

 giving the type of data the command to process.
 the second is an ArrayList of the type 
\begin_inset Quotes eld
\end_inset

type
\begin_inset Quotes erd
\end_inset

 it is used to send first, a list of strings containing the list of the
 torrent titles, then the list of Torrent files to send to server or to
 download.
\end_layout

\begin_layout Standard
Then, the method 
\begin_inset Quotes eld
\end_inset

toByteArray
\begin_inset Quotes erd
\end_inset

 serialize the two parameters.
\end_layout

\begin_layout Subsubsection
UML Diagram
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/UML Diagrams/KaCommand.png
	rotateOrigin center

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
KaCommand UML Diagram
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Code Details
\end_layout

\begin_layout Paragraph
constructor
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public KaCommand(String type, ArrayList<?> list) {
\end_layout

\begin_layout Plain Layout

        this.type = type;
\end_layout

\begin_layout Plain Layout

        this.list = list;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
serialization
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public byte[] toByteArray() throws IOException {
\end_layout

\begin_layout Plain Layout

        System.out.println("serialization");      
\end_layout

\begin_layout Plain Layout

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
\end_layout

\begin_layout Plain Layout

        ObjectOutputStream oos = new ObjectOutputStream(baos);
\end_layout

\begin_layout Plain Layout

        oos.writeUTF(getType());
\end_layout

\begin_layout Plain Layout

        oos.writeObject(getList());
\end_layout

\begin_layout Plain Layout

        return baos.toByteArray();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
KaTorrentManager
\end_layout

\begin_layout Subsubsection
Purpose
\end_layout

\begin_layout Standard
This class Manage and gather information about on hosted,recently added
 or deleted torrents.
\end_layout

\begin_layout Subsubsection
Process
\end_layout

\begin_layout Standard
This torrent manager is instantiate by KaClient thread with two parameters
 : the folder containing the torrent files used by the original BitTorrentClient
 and the folder containing the downloaded files.
\end_layout

\begin_layout Standard
This class is used first to get the hosted , recently added or deleted files
 related with the the torrent files in the the torrent file foder.
\end_layout

\begin_layout Standard
Then, it is used to list the torrent files miising on the server.
 
\end_layout

\begin_layout Standard
In the end, the torrent manager just gives the Download for BitTorrentClient.
\end_layout

\begin_layout Subsubsection
UML
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/UML Diagrams/KaTorrentManager.png
	rotateOrigin center

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
KaTorrentManager UML Diagram
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
get the downloads State
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	/**
\end_layout

\begin_layout Plain Layout

     * @return added / deleted / hosted list in a single Array
\end_layout

\begin_layout Plain Layout

     */
\end_layout

\begin_layout Plain Layout

    public ArrayList<String> downloadsStateToArray() {
\end_layout

\begin_layout Plain Layout

        updateChanges();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        ArrayList<String> returnedList = new ArrayList<>();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        returnedList.add("added");
\end_layout

\begin_layout Plain Layout

        returnedList.addAll(this.addedDownloads);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        returnedList.add("deletedList");
\end_layout

\begin_layout Plain Layout

        returnedList.addAll(deletedDownloads);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        return returnedList;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
updates the changes
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

    /**
\end_layout

\begin_layout Plain Layout

     * store  added / deleted Downloads
\end_layout

\begin_layout Plain Layout

     * then update the current list of HostedDownloads
\end_layout

\begin_layout Plain Layout

     */
\end_layout

\begin_layout Plain Layout

    private void updateChanges() {
\end_layout

\begin_layout Plain Layout

        this.addedDownloads = addedDownloads();
\end_layout

\begin_layout Plain Layout

        this.deletedDownloads = deletedDownloads();
\end_layout

\begin_layout Plain Layout

        updateLastHostedDownloads();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
hosted Downloads
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

    /**
\end_layout

\begin_layout Plain Layout

     * list Configured Download and .torrent Directories to identify matches
\end_layout

\begin_layout Plain Layout

     *
\end_layout

\begin_layout Plain Layout

     * @return list of hosted Downloads compared with what contains the
 .torrent file folder configured
\end_layout

\begin_layout Plain Layout

     */
\end_layout

\begin_layout Plain Layout

    public ArrayList<String> hostedDownloads() {
\end_layout

\begin_layout Plain Layout

        // list torrentDir
\end_layout

\begin_layout Plain Layout

        torrentsList = filePathsToFileNamesArray(listDir(this.torrentsDir,
 ".torrent"),".torrent");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        //  list recursively downloadDir depth :2
\end_layout

\begin_layout Plain Layout

        downloadsList = filePathsToFileNamesArray(listDir(this.downloadsDir,
 ""),"");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        //  match hosted torrents
\end_layout

\begin_layout Plain Layout

        ArrayList<String> hostedTorrents = (ArrayList<String>) torrentsList.clone
();
\end_layout

\begin_layout Plain Layout

        hostedTorrents.retainAll(downloadsList);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        return hostedTorrents;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
added Downloads
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	/**
\end_layout

\begin_layout Plain Layout

     *
\end_layout

\begin_layout Plain Layout

     * @return added downloads filenames from the last check
\end_layout

\begin_layout Plain Layout

     */
\end_layout

\begin_layout Plain Layout

    public ArrayList<String> addedDownloads() {
\end_layout

\begin_layout Plain Layout

        // for 1 st launch
\end_layout

\begin_layout Plain Layout

        if (this.lastHostedDownloads.isEmpty()) {
\end_layout

\begin_layout Plain Layout

            return hostedDownloads();
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        //we get the lastHostedDownloads - deletedDownloads
\end_layout

\begin_layout Plain Layout

        ArrayList<String> keptDownloads = (ArrayList<String>) this.lastHostedDown
loads.clone();
\end_layout

\begin_layout Plain Layout

        keptDownloads.removeAll(deletedDownloads());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        //we do downloadsList - keptDownloads
\end_layout

\begin_layout Plain Layout

        ArrayList<String> addedDownloadsList = hostedDownloads();
\end_layout

\begin_layout Plain Layout

        addedDownloadsList.removeAll(keptDownloads);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

       return addedDownloadsList;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Deleted downloads
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

     *
\end_layout

\begin_layout Plain Layout

     * @return deleted downloads filenames from the last check
\end_layout

\begin_layout Plain Layout

     */
\end_layout

\begin_layout Plain Layout

    public ArrayList<String> deletedDownloads() {
\end_layout

\begin_layout Plain Layout

        ArrayList<String> deletedDownloads = new ArrayList<>();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        // for 1 st launch
\end_layout

\begin_layout Plain Layout

        if (this.lastHostedDownloads.isEmpty()) {
\end_layout

\begin_layout Plain Layout

            return deletedDownloads;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        deletedDownloads = getLastHostedDownloads();
\end_layout

\begin_layout Plain Layout

        deletedDownloads.removeAll(hostedDownloads());
\end_layout

\begin_layout Plain Layout

        return deletedDownloads;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
get Missing Torrents Files
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

    /**
\end_layout

\begin_layout Plain Layout

     * Simply returns a list of .torrents files matching matching a list
 of filename containing the missing torrents on the server
\end_layout

\begin_layout Plain Layout

     * @param list of files names sent by the server containing the filenames
 it does't have the corresponding .torrent file
\end_layout

\begin_layout Plain Layout

     * @return a file list containing the .torrent files not present on the
 server
\end_layout

\begin_layout Plain Layout

     */
\end_layout

\begin_layout Plain Layout

    public ArrayList<File> getMissingTorrentsFiles(ArrayList<String> list){
\end_layout

\begin_layout Plain Layout

        File[] paths = listDir(torrentsDir,".torrent");
\end_layout

\begin_layout Plain Layout

       ArrayList<File> missingTorrents = new ArrayList<>();
\end_layout

\begin_layout Plain Layout

        for(File f : paths){
\end_layout

\begin_layout Plain Layout

           if(list.contains(f.getName()))
\end_layout

\begin_layout Plain Layout

               missingTorrents.add(f);
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        return missingTorrents;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
list directory
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

    /**
\end_layout

\begin_layout Plain Layout

     * List files in a directory according to an extenion file ( ".torrent"
  or nothing for downloads)
\end_layout

\begin_layout Plain Layout

     *
\end_layout

\begin_layout Plain Layout

     * @param dir
\end_layout

\begin_layout Plain Layout

     * @param extension
\end_layout

\begin_layout Plain Layout

     * @return liste of filenames ( without .torrent if necessary)
\end_layout

\begin_layout Plain Layout

     */
\end_layout

\begin_layout Plain Layout

    public File[] listDir(File dir, final String extension) {
\end_layout

\begin_layout Plain Layout

        File[] paths;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        // create new filename filter
\end_layout

\begin_layout Plain Layout

        FilenameFilter fileNameFilter = (dir1, name) -> {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            // for downloadsDir
\end_layout

\begin_layout Plain Layout

            if (extension.equals("")) {
\end_layout

\begin_layout Plain Layout

                return true;
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            //for torrentsDir
\end_layout

\begin_layout Plain Layout

            if (name.lastIndexOf('.') > 0) {
\end_layout

\begin_layout Plain Layout

                // get last index for '.' char
\end_layout

\begin_layout Plain Layout

                int lastIndex = name.lastIndexOf('.');
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

                // get extension
\end_layout

\begin_layout Plain Layout

                String str = name.substring(lastIndex);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

                // match path name extension
\end_layout

\begin_layout Plain Layout

                if (str.equals(extension)) {
\end_layout

\begin_layout Plain Layout

                    return true;
\end_layout

\begin_layout Plain Layout

                }
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

            return false;
\end_layout

\begin_layout Plain Layout

        };
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        // returns pathnames for files and directory
\end_layout

\begin_layout Plain Layout

        paths = dir.listFiles(fileNameFilter);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        // Paths arrays to SimpleName String List
\end_layout

\begin_layout Plain Layout

        return paths;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Changes full paths array into torrent titles ArrayList
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

    /**
\end_layout

\begin_layout Plain Layout

     * this method just turn an a String[] Array containing the full path
 of each torrents into am ArrayList<String>
\end_layout

\begin_layout Plain Layout

     * containing only the titles of the torrent
\end_layout

\begin_layout Plain Layout

     * @param paths
\end_layout

\begin_layout Plain Layout

     * @param extension
\end_layout

\begin_layout Plain Layout

     * @return
\end_layout

\begin_layout Plain Layout

     */
\end_layout

\begin_layout Plain Layout

    private ArrayList<String> filePathsToFileNamesArray(File[] paths, String
 extension) {
\end_layout

\begin_layout Plain Layout

        ArrayList<String> fileNameList = new ArrayList<String>();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        if (extension.equals("")) {
\end_layout

\begin_layout Plain Layout

            for (File path : paths) {
\end_layout

\begin_layout Plain Layout

                fileNameList.add((path.getName()));
\end_layout

\begin_layout Plain Layout

                if (path.isDirectory())
\end_layout

\begin_layout Plain Layout

                    fileNameList.addAll(filePathsToFileNamesArray(listDir(path,
 ""),""));
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

        } else {
\end_layout

\begin_layout Plain Layout

            for (File path : paths)
\end_layout

\begin_layout Plain Layout

                fileNameList.add((path.getName().split(extension))[0]);
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        return fileNameList;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
BitTorrentClient
\end_layout

\begin_layout Subsubsection
Purpose
\end_layout

\begin_layout Standard
This class aim to download a list of torrents , and share them.
\end_layout

\begin_layout Subsubsection
Process
\end_layout

\begin_layout Subsubsection
Code parts
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/UML Diagrams/BittorrentClient.png
	rotateOrigin center

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
BitTorrentClient UML Diagram
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Code Details
\end_layout

\begin_layout Paragraph
Constructor
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

    public BittorrentClient(ArrayList<File> list, File downloadDir, int
 sharingTime) throws IOException, NoSuchAlgorithmException {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        for( File f : list){
\end_layout

\begin_layout Plain Layout

            initiateClient(f,downloadDir, sharingTime);
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Initiate the download and share for a torrent File
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 public void initiateClient(File torrentFile, File downloadDir,int sharingTime)
 throws IOException, NoSuchAlgorithmException {
\end_layout

\begin_layout Plain Layout

        // First, instantiate the Client object.
\end_layout

\begin_layout Plain Layout

        Client client = new Client(
\end_layout

\begin_layout Plain Layout

                // This is the interface the client will listen on (you
 might need something
\end_layout

\begin_layout Plain Layout

                InetAddress.getLocalHost(),
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

                // Load the torrent from the torrent file and use the given
\end_layout

\begin_layout Plain Layout

                // output directory.
 Partials downloads are automatically recovered.
\end_layout

\begin_layout Plain Layout

                SharedTorrent.fromFile(torrentFile,downloadDir));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        // You can optionally set download/upload rate limits
\end_layout

\begin_layout Plain Layout

        // in kB/second.
 Setting a limit to 0.0 disables rate
\end_layout

\begin_layout Plain Layout

        // limits.
\end_layout

\begin_layout Plain Layout

        client.setMaxDownloadRate(50.0);
\end_layout

\begin_layout Plain Layout

        client.setMaxUploadRate(50.0);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        // At this point, can you either call download() to download the
 torrent and
\end_layout

\begin_layout Plain Layout

        // stop immediately after...
\end_layout

\begin_layout Plain Layout

        client.download();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        // Or call client.share(...) with a seed time in seconds:
\end_layout

\begin_layout Plain Layout

         client.share(sharingTime);
\end_layout

\begin_layout Plain Layout

        // Which would seed the torrent for an hour after the download is
 complete.
\end_layout

\begin_layout Plain Layout

        // Downloading and seeding is done in background threads.
\end_layout

\begin_layout Plain Layout

        // To wait for this process to finish, call:
\end_layout

\begin_layout Plain Layout

//        client.waitForCompletion();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        // At any time you can call client.stop() to interrupt the download.
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Section
Server Side
\end_layout

\begin_layout Subsection
KaServer
\end_layout

\begin_layout Subsubsection
Purpose
\end_layout

\begin_layout Standard
The purpose of the server is to store the torrent file of each torrent on
 the network having the application and make statistics about the torrent
 popularity.
\end_layout

\begin_layout Standard
It is based on Paxos algorithm ( 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
cf annexes
\end_layout

\end_inset

 ) .
 
\end_layout

\begin_layout Subsubsection
Process
\end_layout

\begin_layout Standard
In order to work with the Paxos algorithm, at least three intances of this
 classes should be launched with the number of the instance in parameter.
 
\end_layout

\begin_layout Standard
The server starts recovery from the other intances of the class, the begin
 to listen to the server connections.
\end_layout

\begin_layout Subsubsection
UML Diagram
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/UML Diagrams/KaServer.png
	rotateOrigin center

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
KaServer UML Diagram
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Code Details
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public static void main(String[] args) throws IOException, InterruptedException,
\end_layout

\begin_layout Plain Layout

            ExecutionException {
\end_layout

\begin_layout Plain Layout

        if (args.length != 1) {
\end_layout

\begin_layout Plain Layout

            usage();
\end_layout

\begin_layout Plain Layout

            System.exit(1);
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        int localId = Integer.parseInt(args[0]);
\end_layout

\begin_layout Plain Layout

        Configuration process = new Configuration();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        Replica replica = new Replica(process, localId, new KaService());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        replica.start();
\end_layout

\begin_layout Plain Layout

        System.in.read();
\end_layout

\begin_layout Plain Layout

        System.exit(-1);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
KaService
\end_layout

\begin_layout Subsubsection
Purpose
\end_layout

\begin_layout Standard
The Service process the answer receive by the server from a client.
\end_layout

\begin_layout Subsubsection
Process
\end_layout

\begin_layout Standard
The Service deserialize the Client's command containing data.
 It process the data received then reply the process result.
 
\end_layout

\begin_layout Subsubsection
UML Diagram
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/UML Diagrams/KaService.png
	rotateOrigin center

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
KaService UML Diagram
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Code Details
\end_layout

\begin_layout Paragraph
Deserialise the client command
\end_layout

\begin_layout Standard
In the execute method, called by the Server ( KaServer class ) :
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// Deserialise the client command
\end_layout

\begin_layout Plain Layout

        KaCommand command = null;
\end_layout

\begin_layout Plain Layout

        try {
\end_layout

\begin_layout Plain Layout

            command = new KaCommand(value);
\end_layout

\begin_layout Plain Layout

        } catch (IOException e) {
\end_layout

\begin_layout Plain Layout

            logger.log(Level.WARNING, "Incorrect request", e);
\end_layout

\begin_layout Plain Layout

            return null;
\end_layout

\begin_layout Plain Layout

        } catch (ClassNotFoundException e) {
\end_layout

\begin_layout Plain Layout

            e.printStackTrace();
\end_layout

\begin_layout Plain Layout

            logger.log(Level.WARNING, "ClassNotFoundException in request Object
 ", e);
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
title list processing
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

		ByteArrayOutputStream byteArrayOutput = new ByteArrayOutputStream();
\end_layout

\begin_layout Plain Layout

        ArrayList<?> objectSent;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		// Processing data
\end_layout

\begin_layout Plain Layout

        if (command.getType().equals("String")) {
\end_layout

\begin_layout Plain Layout

            getLists((ArrayList<String>) command.getList());
\end_layout

\begin_layout Plain Layout

            objectSent = this.missingTorrents;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            //we serialise back the object
\end_layout

\begin_layout Plain Layout

            try {
\end_layout

\begin_layout Plain Layout

                ObjectOutputStream oos = new ObjectOutputStream(byteArrayOutput)
;
\end_layout

\begin_layout Plain Layout

                oos.writeObject(objectSent);
\end_layout

\begin_layout Plain Layout

            } catch (IOException e) {
\end_layout

\begin_layout Plain Layout

                e.printStackTrace();
\end_layout

\begin_layout Plain Layout

                return null;
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

        } 
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
file list processing
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// [...] 
\end_layout

\begin_layout Plain Layout

else   // command type is File
\end_layout

\begin_layout Plain Layout

        {
\end_layout

\begin_layout Plain Layout

            //register all missing torrents into the torrent file list
\end_layout

\begin_layout Plain Layout

            this.allTorrentsFiles.addAll((ArrayList<File>) command.getList());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            //make average rank
\end_layout

\begin_layout Plain Layout

            double av = averageRank();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            //for each torrent that is not good rank
\end_layout

\begin_layout Plain Layout

            ArrayList<String> underRankTorrents = getUnderRankTorrents(av);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            ArrayList<File> fileSent = new ArrayList<>();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            for (File f : this.allTorrentsFiles) {
\end_layout

\begin_layout Plain Layout

                if (underRankTorrents.contains(f.getName()))
\end_layout

\begin_layout Plain Layout

                    fileSent.add(f);
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
reserialize and the reply
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 		   //reserialization of the rely
\end_layout

\begin_layout Plain Layout

            try {
\end_layout

\begin_layout Plain Layout

                ObjectOutputStream oos = new ObjectOutputStream(byteArrayOutput)
;
\end_layout

\begin_layout Plain Layout

                oos.writeObject(fileSent);
\end_layout

\begin_layout Plain Layout

            } catch (IOException e) {
\end_layout

\begin_layout Plain Layout

                e.printStackTrace();
\end_layout

\begin_layout Plain Layout

                return null;
\end_layout

\begin_layout Plain Layout

            }//send the torrents files relates
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
KaCommand
\end_layout

\begin_layout Subsubsection
Purpose
\end_layout

\begin_layout Standard
On the Server side, the command sent by the client is deserialized in order
 to process the data received.
 This class is used on the server and the client side.
\end_layout

\begin_layout Subsubsection
Process
\end_layout

\begin_layout Standard
The KaCommand class is initialized by the KaService.
 On the server side, the main method used is the constructor.
 It takes one byte array parameters in order to deserialize it and retreive
 the list and the type of list it is.
 
\end_layout

\begin_layout Subsubsection
UML Diagram
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/UML Diagrams/KaCommand.png
	rotateOrigin center

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
KaCommand UML Diagram
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Code Details
\end_layout

\begin_layout Paragraph
constructor and deserialization
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public KaCommand(byte[] bytes) throws IOException, ClassNotFoundException
 {
\end_layout

\begin_layout Plain Layout

        // read from byte array
\end_layout

\begin_layout Plain Layout

        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
\end_layout

\begin_layout Plain Layout

        ObjectInputStream ios = new ObjectInputStream(bais);
\end_layout

\begin_layout Plain Layout

        type = ios.readUTF();
\end_layout

\begin_layout Plain Layout

        list = (ArrayList<?>) ios.readObject();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Tests
\end_layout

\begin_layout Subsection
KaTorrentManagerTest
\end_layout

\begin_layout Subsubsection
Purpose
\end_layout

\begin_layout Standard
This test class has been done to make sure there is no regression in the
 code and to facilitaite the development.
 The conception of the KaTorrentManager has been hazardous on its beginings
 as the concept of torrent file and downloaded ( torrent ) file are near
 and confusingly similar in the common language in spite of their purpose
 differ greatly.
 Moreover the concept of this class changed few time in order to make efficient
 statistics.
\end_layout

\begin_layout Standard
This test has been created to unsure that the methods are fulfilling their
 duty the code.
\end_layout

\begin_layout Subsubsection
Process
\end_layout

\begin_layout Subsubsection
UML Diagram
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/UML Diagrams/KaTorrentManagerTest.png
	rotateOrigin center

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
KaTorrentManagerTest UML Diagram
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Code Details
\end_layout

\begin_layout Paragraph
Setup
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	@Before
\end_layout

\begin_layout Plain Layout

    public void setUp() throws Exception {
\end_layout

\begin_layout Plain Layout

        tm = new KaTorrentManager(new File("/home/m/documents/put/s3/MTh/Paxos/J
Paxos/src/lsr/testResources/torrents"),
\end_layout

\begin_layout Plain Layout

                new File("/home/m/documents/put/s3/MTh/Paxos/JPaxos/src/lsr/test
Resources/downloads"));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        tm.setLastHostedDownloads(tm.hostedDownloads());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        verifyedList = new ArrayList<String>(Arrays.asList("Pirate Informatique
 N30 - Aout-Octobre 2016.pdf",
\end_layout

\begin_layout Plain Layout

                "Votre santé par les jus frais de légumes et de fruits -
 Norman Walker.pdf",
\end_layout

\begin_layout Plain Layout

                "(pdf+epub) Comment décoder les gestes de vos interlocuteurs
  David Cohen",
\end_layout

\begin_layout Plain Layout

                "Le Temps est assassin - Michel Bussi (2016) [ePub].epub"));
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
setHostedDownloads Test
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

    @Test
\end_layout

\begin_layout Plain Layout

    public void setHostedDownloadsTest() throws Exception {
\end_layout

\begin_layout Plain Layout

        assertEquals(verifyedList, this.tm.getLastHostedDownloads());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        }
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
getDeletedDownloads Test
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

    @Test
\end_layout

\begin_layout Plain Layout

    public void getDeletedDownloadsTest() throws Exception {
\end_layout

\begin_layout Plain Layout

        //emptytest
\end_layout

\begin_layout Plain Layout

        tm.setLastHostedDownloads(new ArrayList<String>());
\end_layout

\begin_layout Plain Layout

        assertEquals(new ArrayList<>(),tm.deletedDownloads());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        //normal test
\end_layout

\begin_layout Plain Layout

        tm.setLastHostedDownloads(tm.hostedDownloads());
\end_layout

\begin_layout Plain Layout

        ArrayList<String> tmpList = tm.hostedDownloads();
\end_layout

\begin_layout Plain Layout

        tmpList.add(0,"new DL");
\end_layout

\begin_layout Plain Layout

        tm.setLastHostedDownloads(tmpList);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        assertEquals(tmpList.get(0), tm.deletedDownloads().get(0));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
getAddedDownloads Test
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

    @Test
\end_layout

\begin_layout Plain Layout

    public void getAddedDownloadsTest() throws Exception {
\end_layout

\begin_layout Plain Layout

         //emptytest
\end_layout

\begin_layout Plain Layout

        tm.setLastHostedDownloads(tm.hostedDownloads());
\end_layout

\begin_layout Plain Layout

        ArrayList<String> tmpList = tm.hostedDownloads();
\end_layout

\begin_layout Plain Layout

        tm.setLastHostedDownloads(new ArrayList<String>());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        assertEquals(tmpList,tm.addedDownloads());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        //normal test
\end_layout

\begin_layout Plain Layout

        tm.updateLastHostedDownloads();
\end_layout

\begin_layout Plain Layout

        String verify = tmpList.remove(0);
\end_layout

\begin_layout Plain Layout

        tm.setLastHostedDownloads(tmpList);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        assertEquals(verify, tm.addedDownloads().get(0));
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Performance Evaluation
\end_layout

\begin_layout Standard
tests and optimization .
\end_layout

\begin_layout Standard
example
\end_layout

\begin_layout Standard
expectations
\end_layout

\begin_layout Standard
algo simulations 
\end_layout

\begin_layout Chapter
Conclusions
\end_layout

\begin_layout Standard
General sum up : Context , problem , etc.
\end_layout

\begin_layout Standard
The move of audience from TV to the Internet result in a concentration of
 the most of the video content in a few nodes of the network.
 As Internet is a mesh network, this centralization is detrimental and against
 nature.
\end_layout

\begin_layout Standard
My Thesis answer the PB:
\end_layout

\begin_layout Standard
Thesis specific sum-up 
\end_layout

\begin_layout Standard
thesis conclusion sentence
\end_layout

\begin_layout Standard
Opening: future of the project , improvements..
\end_layout

\begin_layout Chapter
\start_of_appendix
Users Guide
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
backmatter
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\labelwidthstring Odnośniki
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "sop"

\end_inset

A.
\begin_inset space ~
\end_inset

Tanenbaum.
 
\emph on
Operating Systems Design and Implementation
\emph default
.
 Prentice Hall, 2006.
\end_layout

\begin_layout Bibliography
\labelwidthstring Odnośniki
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "shareyourworld.com"

\end_inset

 http://www.beet.tv/2007/07/first-video-sha.html
\end_layout

\begin_layout Bibliography
\labelwidthstring Odnośniki
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-9"

\end_inset

 Aichner, T.
 and Jacob, F.
 (March 2015).
 "Measuring the Degree of Corporate Social Media Use".
 International Journal of Market Research.
 57 (2): 257–275.
\end_layout

\end_body
\end_document
